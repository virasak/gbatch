#!/usr/bin/env groovy

def cli = new CliBuilder()
cli.h(longOpt:'help', required:false, 'show usage')
cli.d(longOpt:'directory', required:false, args:1, 'Script directory')
cli.t(longOpt:'target', required:false, args:1, 'stop after run the target script')
cli.p(longOpt:'print', required:false, 'print all target names')
cli.usage = 'Usage: gbatch [-h] [-p] [-d dir] [-t target] (setup|teardown)'

def opt = cli.parse(args)

if (!opt || opt.h || opt.arguments().size() != 1 || !['setup', 'teardown'].contains(opt.arguments()[0])) {
  cli.usage()
  return
}

def scriptDir = new File(opt.d?: '.')

if (!scriptDir.isDirectory()) {
  println "${scriptDir.path} is not directory"
  return
}

def mode = opt.arguments()[0]
println """ ${mode} on "${scriptDir.path}" directory"""

// list all script files in target directory
def scriptFiles = []
def pattern = ~/S(\d+)_(.*)\.groovy/

scriptDir.eachFileMatch(pattern) { 
    def matcher = it.name =~ pattern
    scriptFiles << ([file:it, order:matcher[0][1], target:matcher[0][2]])
}

// sort by order number ( S[ordernumber]_[target].groovy )
scriptFiles.sort { it.order }

if (opt.p) {
  scriptFiles.each {
    println "${it.order}\t${it.target}"
  }
  return 
}

// if need to run upto specific target
if (opt.t) {
  def target = opt.t

  // find if target is exists
  def index =  scriptFiles.findIndexOf { it.target == target }

  if (index == -1) {
    println "${target} target does not found"
    return
  }

  // trim upto target
  scriptFiles = scriptFiles[0..index]
}

if (!scriptFiles) {
  println "Script file is not found"
  return
}

// reverse target if in teardown mode
if (mode == 'teardown') {
  scriptFiles.each {
    it.file = new File(scriptDir, 'K' + it.file.name[1..-1])
  }
  def missingScriptFiles = scriptFiles.findAll { !it.file.exists() }
  if (missingScriptFiles) {
    println "Not found: "
    missingScriptFiles.each { println "\t${it.file.name}" }
    return
  }
  
  scriptFiles = scriptFiles.reverse()
}


// find the init script of both setup and teardown mode
def initScriptFile = new File(scriptDir, "__init__.groovy")
if (initScriptFile.exists()) {
  scriptFiles = [[file:initScriptFile, order:'SK', target:'__init__']] + scriptFiles
}


def binding = new Binding()
def TERMINATE_SCRIPT = new Object()
binding.setVariable('TERMINATE_SCRIPT', TERMINATE_SCRIPT) // return TERMINATE_SCRIPT to stop batch
binding.setVariable('__SCRIPT_DIR__', scriptDir)
def shell = new GroovyShell(binding)

// process each script
// if any script return TERMINATE_SCRIPT, exit the batch
scriptFiles.every { 
  println "process '${it.target}' target"
  TERMINATE_SCRIPT != shell.evaluate(it.file) 
}
